"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[36447],{36447:(e,t,n)=>{n.r(t),n.d(t,{ElevationSamplerBase:()=>c,MultiTileElevationSampler:()=>p,TileElevationSampler:()=>h,updateGeometryElevation:()=>m});n(21265);var s=n(42198),i=n(50925),a=n(84190),o=n(75400),l=n(90772),r=n(5616);const u=()=>i.A.getLogger("esri.layers.support.ElevationSampler");class c{queryElevation(e){return m(e.clone(),this)}on(){return(0,s.hA)()}projectIfRequired(e,t){return f(e,t)}}class h extends c{get spatialReference(){return this.extent.spatialReference}constructor(e,t,n){super(),this.tile=e,this.noDataValue=n;const s=e.tile.extent;this.extent=(0,l.w1)(s,t.spatialReference),this.extent.zmin=e.zmin,this.extent.zmax=e.zmax,this._aaExtent=s;const i=(0,a.GA)(t.spatialReference),o=t.lodAt(e.tile.level).resolution*i;this.demResolution={min:o,max:o}}contains(e){const t=this.projectIfRequired(e,this.spatialReference);return null!=t&&this.containsAt(t.x,t.y)}containsAt(e,t){return(0,l.Rj)(this._aaExtent,e,t)}elevationAt(e,t){if(!this.containsAt(e,t)){const n=this.extent,s=`${n.xmin}, ${n.ymin}, ${n.xmax}, ${n.ymax}`;return u().warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler extent (${s})`),this.noDataValue}return this.tile.sample(e,t)??this.noDataValue}}class p extends c{get spatialReference(){return this.extent.spatialReference}constructor(e,t,n){let s;super(),"number"==typeof t?(this.noDataValue=t,s=null):(s=t,this.noDataValue=n),this.samplers=s?e.map((e=>new h(e,s,this.noDataValue))):e;const i=this.samplers[0];if(i){this.extent=i.extent.clone();const{min:e,max:t}=i.demResolution;this.demResolution={min:e,max:t};for(let n=1;n<this.samplers.length;n++){const e=this.samplers[n];this.extent.union(e.extent),this.demResolution.min=Math.min(this.demResolution.min,e.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,e.demResolution.max)}}else this.extent=(0,l.w1)((0,l.vt)(),s.spatialReference),this.demResolution={min:0,max:0}}elevationAt(e,t){let n,s=!1;for(const i of this.samplers)if(i.containsAt(e,t)&&(s=!0,n=i.elevationAt(e,t),n!==i.noDataValue))return n;return null!=n?n:(s||u().warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler`),this.noDataValue)}}function m(e,t){const n=f(e,t.spatialReference);if(!n)return null;switch(e.type){case"point":!function(e,t,n){e.z=n.elevationAt(t.x,t.y)}(e,n,t);break;case"polyline":!function(e,t,n){x.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.paths.length;i++){const a=e.paths[i],o=t.paths[i];for(let e=0;e<a.length;e++){const t=a[e],i=o[e];x.x=i[0],x.y=i[1],s&&(t[3]=t[2]),t[2]=n.elevationAt(x.x,x.y)}}e.hasZ=!0}(e,n,t);break;case"multipoint":!function(e,t,n){x.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.points.length;i++){const a=e.points[i],o=t.points[i];x.x=o[0],x.y=o[1],s&&(a[3]=a[2]),a[2]=n.elevationAt(x.x,x.y)}e.hasZ=!0}(e,n,t)}return e}function f(e,t){if(null==e)return null;const n=e.spatialReference;if(n.equals(t))return e;const s=(0,r.project)(e,t);return s||u().error(`Cannot project geometry spatial reference (wkid:${n.wkid}) to elevation sampler spatial reference (wkid:${t.wkid})`),s}const x=new o.default}}]);