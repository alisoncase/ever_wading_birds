"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[11392,98185],{11392:(t,e,a)=>{a.r(e),a.d(e,{default:()=>b});var s=a(93800),r=a(47412),l=a(89129),o=a(74719),i=a(81933),p=a(50925),n=a(20620),u=a(49959),d=a(79953),h=a(48602),c=(a(21265),a(14746),a(75269)),y=a(78139),m=a(98185);const f=l.default.ofType(r.default);let _=class extends(i.A.LoadableMixin(n.A.EsriPromiseMixin(m.default))){constructor(t){super(t),this._lastPortalBasemapFetchController=null,this.basemaps=new f,this.filterFunction=null,this.portal=y.default.getDefault(),this.query=null,this.updateBasemapsCallback=null,this.viewType=null}initialize(){this.addHandles((0,d.watch)((()=>[this.filterFunction,this.loadStatus,this.portal?.basemapGalleryGroupQuery,this.portal?.basemapGalleryGroupQuery3D,this.portal?.user,this.query,this.updateBasemapsCallback]),(()=>this.refresh()),d.initial))}destroy(){this.filterFunction=null,this.portal=null,this.basemaps.forEach((t=>t.destroy()))}get state(){return"not-loaded"===this.loadStatus?"not-loaded":"loading"===this.loadStatus||this._lastPortalBasemapFetchController?"loading":"ready"}load(t){return this.addResolvingPromise(this.portal.load(t)),Promise.resolve(this)}async refresh(){if("loaded"!==this.loadStatus)return;this._lastPortalBasemapFetchController&&(this._lastPortalBasemapFetchController.abort(),this._lastPortalBasemapFetchController=null);const t=this.portal,e=new AbortController;this._lastPortalBasemapFetchController=e,this.notifyChange("state");try{const a=await t.fetchBasemaps(this._toQueryString(this.query),{signal:e.signal,include3d:"3d"===this.viewType||void 0});await this._updateBasemaps(a)}catch(a){if((0,u.isAbortError)(a))throw a;p.A.getLogger(this).warn(new o.default("basemap-source:fetch-basemaps-error","Could not fetch basemaps from portal.",{error:a})),await this._updateBasemaps()}this._lastPortalBasemapFetchController=null,this.notifyChange("state")}_toQueryString(t){return t&&"string"!=typeof t?Object.keys(t).map((e=>`${e}:${t[e]}`)).join(" AND "):t}async _updateBasemaps(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=await this._filterBasemaps(t);e=this.updateBasemapsCallback?await this.updateBasemapsCallback(e):e,this.basemaps.removeAll(),this.basemaps.addMany(e)}async _filterBasemaps(t){if(!this.filterFunction)return t;const e=t.map(this.filterFunction),a=await Promise.all(e);return t.filter(((t,e)=>a[e]))}};(0,s._)([(0,h.MZ)({readOnly:!0,type:f})],_.prototype,"basemaps",void 0),(0,s._)([(0,h.MZ)()],_.prototype,"filterFunction",void 0),(0,s._)([(0,h.MZ)({type:y.default})],_.prototype,"portal",void 0),(0,s._)([(0,h.MZ)()],_.prototype,"query",void 0),(0,s._)([(0,h.MZ)({readOnly:!0})],_.prototype,"state",null),(0,s._)([(0,h.MZ)()],_.prototype,"updateBasemapsCallback",void 0),(0,s._)([(0,h.MZ)()],_.prototype,"viewType",void 0),_=(0,s._)([(0,c.$)("esri.widgets.BasemapGallery.support.PortalBasemapsSource")],_);const b=_},98185:(t,e,a)=>{a.r(e),a.d(e,{default:()=>d});var s=a(93800),r=a(47412),l=a(6946),o=a(89129),i=a(48602),p=(a(21265),a(50925),a(14746),a(75269));const n=o.default.ofType(r.default);let u=class extends l.default{constructor(t){super(t),this.basemaps=new n}destroy(){this.basemaps.forEach((t=>t.destroy()))}get state(){return"ready"}refresh(){}};(0,s._)([(0,i.MZ)({type:n})],u.prototype,"basemaps",void 0),(0,s._)([(0,i.MZ)({readOnly:!0})],u.prototype,"state",null),u=(0,s._)([(0,p.$)("esri.widgets.BasemapGallery.support.LocalBasemapsSource")],u);const d=u}}]);