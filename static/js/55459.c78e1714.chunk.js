"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[55459],{15173:(t,e,r)=>{r.d(e,{T:()=>s,U:()=>h});var n=r(64682);function h(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const h=(0,n.qE)(t,0,l);for(let n=0;n<4;n++)e[r+n]=Math.floor(256*c(h*i[n]))}function s(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=0;for(let n=0;n<4;n++)r+=t[e+n]*o[n];return r}const i=[1,256,65536,16777216],o=[1/256,1/65536,1/16777216,1/4294967296],l=s(new Uint8ClampedArray([255,255,255,255]));function c(t){return t-Math.floor(t)}},39817:(t,e,r)=>{r.d(e,{A:()=>h});var n=r(42080);class h{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];this.lengths=t??[],this.coords=e??[]}static fromJSON(t){return new h(t.lengths,t.coords)}static fromRect(t){const[e,r,n,s]=t,i=n-e,o=s-r;return new h([5],[e,r,i,0,0,o,-i,0,0,-o])}get isPoint(){return 0===this.lengths.length&&this.coords.length>=2}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce(((t,e)=>t+e))}get usedMemory(){return 64+(0,n.Qf)(this.lengths,this.coords)}area(){let t=0,e=0;if(!this.lengths.length)return 0;for(let r=0;r<this.lengths.length;r++){const n=this.lengths[r];if(n<3)continue;let h=this.coords[2*e],s=this.coords[2*e+1];for(let r=1;r<n;r+=1){const n=this.coords[2*(r+e)],i=this.coords[2*(r+e)+1];t+=-.5*(n-h)*(i+s),h=n,s=i}e+=n}return t}forEachVertex(t){let e=0;this.lengths.length||t(this.coords[0],this.coords[1]);for(let r=0;r<this.lengths.length;r++){const n=this.lengths[r];for(let r=0;r<n;r++)t(this.coords[2*(r+e)],this.coords[2*(r+e)+1]);e+=n}}deltaDecode(){const t=this.clone(),{coords:e,lengths:r}=t;let n=0;for(const h of r){for(let t=1;t<h;t++)e[2*(n+t)]+=e[2*(n+t)-2],e[2*(n+t)+1]+=e[2*(n+t)-1];n+=h}return t}clone(t){if(0===this.lengths.length)return new h([],[this.coords[0],this.coords[1]]);const e=2*(0===this.lengths.length?1:this.lengths.reduce(((t,e)=>t+e))),r=this.coords.slice(0,e);return t?(t.set(r),new h(this.lengths,t)):new h(Array.from(this.lengths),Array.from(r))}}},42080:(t,e,r)=>{r.d(e,{$B:()=>h,Qf:()=>c,Qh:()=>o,RS:()=>s,ez:()=>f,i5:()=>g,lM:()=>i,qK:()=>u,rq:()=>a});var n=r(25048);function h(t){return 32+t.length}const s=16;function i(t){if(!t)return 0;let e=u;for(const r in t)t.hasOwnProperty(r)&&(e+=l(t[r],!1));return e}function o(t){if(!t)return 0;if("number"==typeof t[0])return c(t);if(Array.isArray(t))return function(t){const e=t.length;if(0===e||"number"==typeof t[0])return a(t,8);let r=f;for(let n=0;n<e;n++)r+=l(t[n]);return r}(t);let e=u;for(const r in t)t.hasOwnProperty(r)&&(e+=l(t[r]));return e}function l(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];switch(typeof t){case"object":return e?o(t):u;case"string":return h(t);case"number":return s;case"boolean":return 4;default:return 8}}function c(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return e.reduce(((t,e)=>t+(e?(0,n.iu)(e)?e.byteLength+g:Array.isArray(e)?a(e,s):0:0)),0)}function a(t,e){return f+t.length*e}const u=32,f=16,g=145},53507:(t,e,r)=>{r.r(e),r.d(e,{convertToCIMSymbol:()=>i});var n=r(74719),h=r(14360),s=r(88116);function i(t){const e=(0,s.Vb)(t);if(!e)throw new n.default("cimConversionUtils.convertToCIMSymbol","Unable to convert this symbol to CIM");return new h.default({data:e})}},75201:(t,e,r)=>{r.d(e,{A:()=>h});var n=r(74715);class h{constructor(t,e,r,h){this.transformedX=0,this.transformedY=0,this.center=(0,n.fA)(t,e),this.centerT=(0,n.vt)(),this.halfWidth=r/2,this.halfHeight=h/2,this.width=r,this.height=h}get x(){return this.center[0]}get y(){return this.center[1]}get blX(){return this.center[0]+this.halfWidth}get blY(){return this.center[1]+this.halfHeight}get trX(){return this.center[0]-this.halfWidth}get trY(){return this.center[1]-this.halfHeight}get xmin(){return this.x-this.halfWidth}get xmax(){return this.x+this.halfWidth}get ymin(){return this.y-this.halfHeight}get ymax(){return this.y+this.halfHeight}set x(t){this.center[0]=t}set y(t){this.center[1]=t}clone(){return new h(this.x,this.y,this.width,this.height)}serialize(t){return t.writeF32(this.center[0]),t.writeF32(this.center[1]),t.push(this.width),t.push(this.height),t}findCollisionDelta(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4;const r=Math.abs(t.centerT[0]-this.centerT[0]),n=Math.abs(t.centerT[1]-this.centerT[1]),h=(t.halfWidth+this.halfWidth+e)/r,s=(t.halfHeight+this.halfHeight+e)/n,i=Math.min(h,s);return Math.log2(i)}extend(t){const e=Math.min(this.xmin,t.xmin),r=Math.min(this.ymin,t.ymin),n=Math.max(this.xmax,t.xmax)-e,h=Math.max(this.ymax,t.ymax)-r,s=e+n/2,i=r+h/2;this.width=n,this.height=h,this.halfWidth=n/2,this.halfHeight=h/2,this.x=s,this.y=i}static deserialize(t){const e=t.readF32(),r=t.readF32(),n=t.readInt32(),s=t.readInt32();return new h(e,r,n,s)}}}}]);