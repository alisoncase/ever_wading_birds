"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[15736,93355],{15736:(t,e,i)=>{i.r(e),i.d(e,{BufferObject:()=>r.g,FramebufferObject:()=>s.H,Program:()=>n.B,ProgramCache:()=>h.J,Renderbuffer:()=>o.l,ShaderCompiler:()=>c.Z,Texture:()=>a.g,VertexArrayObject:()=>l.Z,createProgram:()=>f.r,glslifyDefineMap:()=>u.I});var r=i(80861),s=i(82350),n=i(27551),h=i(42290),o=i(97306),c=i(76288),a=i(64177),l=i(25874),u=i(76165),f=i(16940)},16940:(t,e,i)=>{i.d(e,{r:()=>s});var r=i(27551);function s(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return new r.B(t,i+e.shaders.vertexShader,i+e.shaders.fragmentShader,e.attributes)}},30179:(t,e,i)=>{i.d(e,{e:()=>n,q:()=>s});var r=i(44480);class s{constructor(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;this.internalFormat=t,this.width=e,this.height=i,this.multisampled=!1,this.samples=1}}function n(t){return t.width<=0||t.height<=0||null==t.internalFormat?0:t.width*t.height*(0,r.IB)(t.internalFormat)}},42290:(t,e,i)=>{i.d(e,{J:()=>n});i(21265);var r=i(57942),s=i(27551);class n{constructor(t){this._rctx=t,this._store=new r.O}dispose(){this._store.forAll((t=>t.dispose())),this._store.clear()}acquire(t,e,i,r){const n=this._store.get(t,e);if(null!=n)return n.ref(),n;const h=new s.B(this._rctx,t,e,i,r);return h.ref(),this._store.set(t,e,h),h}get test(){}}},57942:(t,e,i)=>{i.d(e,{O:()=>r});class r{constructor(){this._outer=new Map}clear(){this._outer.clear()}get empty(){return 0===this._outer.size}get(t,e){return this._outer.get(t)?.get(e)}getInner(t){return this._outer.get(t)}set(t,e,i){const r=this._outer.get(t);r?r.set(e,i):this._outer.set(t,new Map([[e,i]]))}delete(t,e){const i=this._outer.get(t);i&&(i.delete(e),0===i.size&&this._outer.delete(t))}forEach(t){this._outer.forEach(((e,i)=>t(e,i)))}forAll(t){for(const e of this._outer.values())for(const i of e.values())t(i)}}},76165:(t,e,i)=>{function r(t){const{options:e,value:i}=t;return"number"==typeof e[i]}function s(t){let e="";for(const i in t){const s=t[i];if("boolean"==typeof s)s&&(e+=`#define ${i}\n`);else if("number"==typeof s)e+=`#define ${i} ${s.toFixed()}\n`;else if("object"==typeof s)if(r(s)){const{value:t,options:r,namespace:n}=s,h=n?`${n}_`:"";for(const i in r)e+=`#define ${h}${i} ${r[i].toFixed()}\n`;e+=`#define ${i} ${h}${t}\n`}else{const t=s.options;let r=0;for(const i in t)e+=`#define ${t[i]} ${(r++).toFixed()}\n`;e+=`#define ${i} ${t[s.value]}\n`}}return e}i.d(e,{I:()=>s})},76288:(t,e,i)=>{i.d(e,{Z:()=>r});class r{constructor(t){this._readFile=t}resolveIncludes(t){return this._resolve(t)}_resolve(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Map;if(e.has(t))return e.get(t);const i=this._read(t);if(!i)throw new Error(`cannot find shader file ${t}`);const r=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let s=r.exec(i);const n=[];for(;null!=s;)n.push({path:s[1],start:s.index,length:s[0].length}),s=r.exec(i);let h=0,o="";return n.forEach((t=>{o+=i.slice(h,t.start),o+=e.has(t.path)?"":this._resolve(t.path,e),h=t.start+t.length})),o+=i.slice(h),e.set(t,o),o}_read(t){return this._readFile(t)}}},82350:(t,e,i)=>{i.d(e,{H:()=>f,T:()=>d});i(21265);var r=i(50925),s=i(17741),n=i(80861),h=i(24591),o=i(92156),c=i(45192),a=i(97306),l=i(64177);const u=()=>r.A.getLogger("esri.views.webgl.FramebufferObject");class f{constructor(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._context=t,this._glName=null,this._colorAttachments=new Map,this._depthStencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,t.instanceCounter.increment(o.vt.FramebufferObject,this);const r=_(e)?e:new l.g(this._context,e);if(this._colorAttachments.set(o.Nm.COLOR_ATTACHMENT0,r),this._validateTextureDescriptor(r.descriptor),this._validateColorAttachmentPoint(o.Nm.COLOR_ATTACHMENT0),null!=i)if(function(t){return _(t)||null!=t&&"pixelFormat"in t}(i))this._depthStencilTexture=_(i)?i:new l.g(this._context,i),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const t=function(t){return null!=t&&"type"in t&&t.type===c.p.RenderBuffer}(i)?i:new a.l(this._context,i);this._depthStencilBuffer=t,this._validateRenderBufferDescriptor(t.descriptor)}}dispose(){if(0===this._colorAttachments.size&&!this._glName)return;const t=this._context.getBoundFramebufferObject();this._colorAttachments.forEach(((t,e)=>this.detachColorTexture(e)?.dispose())),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),this._glName&&(this._context.gl.deleteFramebuffer(this._glName),this._glName=null),this._context.bindFramebuffer(t),this._context.instanceCounter.decrement(o.vt.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(o.Nm.COLOR_ATTACHMENT0)}get depthStencil(){return this._depthStencilTexture||this._depthStencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){const t=this._colorAttachments.get(o.Nm.COLOR_ATTACHMENT0);return t?.descriptor?.width??0}get height(){const t=this._colorAttachments.get(o.Nm.COLOR_ATTACHMENT0);return t?.descriptor?.height??0}get usedMemory(){return[...this._colorAttachments].reduce(((t,e)=>{let[i,r]=e;return t+r.usedMemory}),this.depthStencil?.usedMemory??0)}getColorTexture(t){const e=this._colorAttachments.get(t);return e&&_(e)?e:null}get colorAttachments(){return[...this._colorAttachments.keys()]}attachColorTexture(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Nm.COLOR_ATTACHMENT0;if(!t)return;this._validateColorAttachmentPoint(e);const i=t.descriptor;this._validateTextureDescriptor(i),this.detachColorTexture(e)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,e)),this._colorAttachments.set(e,t)}detachColorTexture(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.Nm.COLOR_ATTACHMENT0;const e=this._colorAttachments.get(t);if(e){if(this._initialized){const e=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t),this._context.bindFramebuffer(e)}return this._colorAttachments.delete(t),e}}setColorTextureTarget(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Nm.COLOR_ATTACHMENT0;const i=this._colorAttachments.get(e);i&&this._framebufferTexture2D(i.glName,e,t)}attachDepthStencil(t){if(t)switch(t.type){case c.p.Texture:return this._attachDepthStencilTexture(t);case c.p.RenderBuffer:return this._attachDepthStencilBuffer(t)}}_attachDepthStencilTexture(t){if(null==t)return;const e=t.descriptor;e.pixelFormat!==o.Ab.DEPTH_STENCIL&&e.pixelFormat!==o.Ab.DEPTH24_STENCIL8&&console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"),e.dataType!==o.ld.UNSIGNED_INT_24_8&&console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"),this._validateTextureDescriptor(e),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,o.nI)),this._depthStencilTexture?.dispose(),this._depthStencilTexture=t}detachDepthStencilTexture(){const t=this._depthStencilTexture;if(t&&this._initialized){const t=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),this._framebufferTexture2D(null,o.nI),this._context.bindFramebuffer(t)}return this._depthStencilTexture=null,t}_attachDepthStencilBuffer(t){if(null==t)return;const e=t.descriptor;if(this._validateRenderBufferDescriptor(e),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const i=this._context.gl,r=this._getGLAttachmentPoint(e);i.framebufferRenderbuffer(o.R.FRAMEBUFFER,r,i.RENDERBUFFER,t.glName)}this._depthStencilBuffer=t}detachDepthStencilBuffer(){const t=this._depthStencilBuffer;if(t&&this._initialized){const e=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this);const i=this._context.gl,r=this._getGLAttachmentPoint(t.descriptor);i.framebufferRenderbuffer(o.R.FRAMEBUFFER,r,i.RENDERBUFFER,null),this._context.bindFramebuffer(e)}return this._depthStencilBuffer=null,t}copyToTexture(t,e,i,r,s,n,h){(t<0||e<0||s<0||n<0)&&console.error("Offsets cannot be negative!"),(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!");const c=h.descriptor;h.descriptor.target!==o.Ap.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(null==c?.width||null==c?.height||t+i>this.width||e+r>this.height||s+i>c.width||n+r>c.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const a=this._context,u=a.bindTexture(h,l.g.TEXTURE_UNIT_FOR_UPDATES);a.setActiveTexture(l.g.TEXTURE_UNIT_FOR_UPDATES),a.bindFramebuffer(this),a.gl.copyTexSubImage2D(o.Ap.TEXTURE_2D,0,s,n,t,e,i,r),a.bindTexture(u,l.g.TEXTURE_UNIT_FOR_UPDATES)}readPixels(t,e,i,r,s,n,h){(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!"),h||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(t,e,i,r,s,n,h)}async readPixelsAsync(t,e,i,r,s,h,c){const{gl:a}=this._context,l=n.g.createPixelPack(this._context,o._U.STREAM_READ,c.byteLength);this._context.bindBuffer(l);const u=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),a.readPixels(t,e,i,r,s,h,0),this._context.unbindBuffer(o.NZ.PIXEL_PACK_BUFFER),this._context.bindFramebuffer(u),await l.getSubDataAsync(c),l.dispose()}resize(t,e){if(this.width===t&&this.height===e)return;const i={width:t,height:e};d(i,this._context.parameters.maxTextureSize),this._colorAttachments.forEach((t=>t.resize(i.width,i.height))),this._depthStencilTexture?.resize(i.width,i.height),this._initialized&&(d(i,this._context.parameters.maxRenderbufferSize),this._depthStencilBuffer?.resize(i.width,i.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.R.FRAMEBUFFER;const e=this._context.gl;if(this._initialized)return void e.bindFramebuffer(t,this.glName);this._glName&&e.deleteFramebuffer(this._glName);const i=e.createFramebuffer();if(e.bindFramebuffer(t,i),this._colorAttachments.forEach(((e,i)=>this._framebufferTexture2D(e.glName,i,m(e),t))),this._depthStencilBuffer){const i=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);e.framebufferRenderbuffer(t,i,e.RENDERBUFFER,this._depthStencilBuffer.glName)}else this._depthStencilTexture&&this._framebufferTexture2D(this._depthStencilTexture.glName,e.DEPTH_STENCIL_ATTACHMENT,m(this._depthStencilTexture),t);(0,h.en)()&&e.checkFramebufferStatus(t)!==e.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=i,this._initialized=!0}_framebufferTexture2D(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Nm.COLOR_ATTACHMENT0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.Ap.TEXTURE_2D,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:o.R.FRAMEBUFFER,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;this._context.gl.framebufferTexture2D(r,e,i,t,s)}_disposeDepthStencilAttachments(){const t=this._context.gl;if(this._depthStencilBuffer){if(this._initialized){this._context.bindFramebuffer(this);const e=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);t.framebufferRenderbuffer(o.R.FRAMEBUFFER,e,t.RENDERBUFFER,null)}this._depthStencilBuffer=(0,s.WD)(this._depthStencilBuffer)}this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t.DEPTH_STENCIL_ATTACHMENT)),this._depthStencilTexture=(0,s.WD)(this._depthStencilTexture))}_validateTextureDescriptor(t){t.target!==o.Ap.TEXTURE_2D&&t.target!==o.Ap.TEXTURE_CUBE_MAP&&console.error("Texture type must be TEXTURE_2D or TEXTURE_CUBE_MAP!"),d(t,this._context.parameters.maxTextureSize),this._validateBufferDimensions(t)}_validateRenderBufferDescriptor(t){d(t,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(t)}_validateBufferDimensions(t){t.width<=0&&(t.width=this.width),t.height<=0&&(t.height=this.height),this.width>0&&this.height>0&&(this.width===t.width&&this.height===t.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(t){switch(t.internalFormat){case o.yQ.DEPTH_COMPONENT16:case o.yQ.DEPTH_COMPONENT24:case o.yQ.DEPTH_COMPONENT32F:return this._context.gl.DEPTH_ATTACHMENT;case o.yQ.DEPTH24_STENCIL8:case o.yQ.DEPTH32F_STENCIL8:case o.yQ.DEPTH_STENCIL:return this._context.gl.DEPTH_STENCIL_ATTACHMENT;case o.yQ.STENCIL_INDEX8:return this._context.gl.STENCIL_ATTACHMENT}}_validateColorAttachmentPoint(t){if(-1===f._MAX_COLOR_ATTACHMENTS){const{gl:t}=this._context;f._MAX_COLOR_ATTACHMENTS=t.getParameter(t.MAX_COLOR_ATTACHMENTS)}const e=t-o.Nm.COLOR_ATTACHMENT0;e+1>f._MAX_COLOR_ATTACHMENTS&&r.A.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${e+1}. Implementation supports up to ${f._MAX_COLOR_ATTACHMENTS} color attachments`)}}function _(t){return null!=t&&"type"in t&&t.type===c.p.Texture}function d(t,e){const i=Math.max(t.width,t.height);if(i>e){u().warn(`Resizing FBO attachment size ${t.width}x${t.height} to device limit ${e}`);const r=e/i;return t.width=Math.round(t.width*r),t.height=Math.round(t.height*r),!1}return!0}function m(t){return t.descriptor.target===o.Ap.TEXTURE_CUBE_MAP?o.Ap.TEXTURE_CUBE_MAP_POSITIVE_X:o.Ap.TEXTURE_2D}f._MAX_COLOR_ATTACHMENTS=-1},97306:(t,e,i)=>{i.d(e,{l:()=>h});var r=i(92156),s=i(45192),n=i(30179);class h{constructor(t,e){this._context=t,this._descriptor=e,this.type=s.p.RenderBuffer,this._context.instanceCounter.increment(r.vt.Renderbuffer,this);const i=this._context.gl;this.glName=i.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:n,height:h,internalFormat:o,multisampled:c}=e;c?i.renderbufferStorageMultisample(i.RENDERBUFFER,this.samples,o,n,h):i.renderbufferStorage(i.RENDERBUFFER,o,n,h),this._context.bindRenderbuffer(null)}get descriptor(){return this._descriptor}get samples(){const t=this._descriptor.samples,e=this._context.parameters.maxSamples;return t?Math.min(t,e):e}get usedMemory(){return(0,n.e)(this._descriptor)}resize(t,e){const i=this._descriptor;if(i.width===t&&i.height===e)return;i.width=t,i.height=e;const r=this._context.gl;this._context.bindRenderbuffer(this),i.multisampled?r.renderbufferStorageMultisample(r.RENDERBUFFER,this.samples,i.internalFormat,i.width,i.height):r.renderbufferStorage(r.RENDERBUFFER,i.internalFormat,i.width,i.height),this._context.bindRenderbuffer(null)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(r.vt.Renderbuffer,this),this._context=null)}}}}]);