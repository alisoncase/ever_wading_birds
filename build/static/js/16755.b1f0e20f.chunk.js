"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[16755],{16755:(e,t,i)=>{i.r(t),i.d(t,{default:()=>f});var r=i(93800),o=i(74719),a=i(48602),n=(i(21265),i(50925),i(14746),i(75269)),l=i(12560),s=i(93321),d=i(90772),u=i(57457),p=i(4126);const v=new(i(1283).U)("0/0/0",0,0,0,void 0);let c=class extends u.default{constructor(){super(...arguments),this.tileInfo=p.default.create({spatialReference:s.default.WebMercator,size:256}),this.fullExtent=new l.default(-20037508.342787,-20037508.34278,20037508.34278,20037508.342787,s.default.WebMercator),this.spatialReference=s.default.WebMercator,this.type="base-elevation"}addResolvingPromise(e){super.addResolvingPromise(e)}getTileBounds(e,t,i,r){const o=r||d.v_;return v.level=e,v.row=t,v.col=i,v.extent=o,this.tileInfo.updateTileInfo(v),v.extent=void 0,o}fetchTile(){throw new o.default("BaseElevationLayer:fetchTile-not-implemented","fetchTile() is not implemented")}async queryElevation(e,t){const{ElevationQuery:i}=await this._importElevationQuery();return(new i).query(this,e,t)}createElevationSampler(e,t){return this._importElevationQuery().then((i=>(new i.ElevationQuery).createSampler(this,e,t)))}_importElevationQuery(){return i.e(3363).then(i.bind(i,3363))}};(0,r._)([(0,a.MZ)({type:p.default})],c.prototype,"tileInfo",void 0),(0,r._)([(0,a.MZ)({type:["show","hide"]})],c.prototype,"listMode",void 0),(0,r._)([(0,a.MZ)()],c.prototype,"fullExtent",void 0),(0,r._)([(0,a.MZ)()],c.prototype,"spatialReference",void 0),(0,r._)([(0,a.MZ)({readOnly:!0,value:"base-elevation"})],c.prototype,"type",void 0),c=(0,r._)([(0,n.$)("esri.layers.BaseElevationLayer")],c);const f=c}}]);