"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[84766],{24889:(t,e,n)=>{n.d(e,{SZ:()=>i,e8:()=>s,hm:()=>r});var o=n(42761);const i=(0,o.O)()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),r=(0,o.O)()({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"}),s=(0,o.O)()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"})},84766:(t,e,n)=>{n.r(e),n.d(e,{default:()=>U});var o=n(93800),i=n(19455),r=n(82301),s=n(48602),p=(n(21265),n(50925),n(47332)),a=n(14800),u=n(75269),y=n(15484),c=n(42761),l=n(80556),d=(n(14746),n(24889));let m=class extends i.A{constructor(){super(...arguments),this.pixelType="unknown"}};(0,o._)([(0,s.MZ)({type:String,json:{write:{isRequired:!0}}})],m.prototype,"name",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],m.prototype,"description",void 0),(0,o._)([(0,s.MZ)({type:l.jz,json:{type:l.jz,write:!0,name:"_object_id"}})],m.prototype,"id",void 0),(0,o._)([(0,s.MZ)({type:String,json:{type:d.e8.jsonValues,read:d.e8.read,write:{writer:d.e8.write,isRequired:!0}}})],m.prototype,"pixelType",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:{isRequired:!0}}})],m.prototype,"type",void 0),m=(0,o._)([(0,u.$)("esri.layers.support.RasterFunctionInfo")],m);const f=m;let w=class extends i.A{constructor(){super(...arguments),this.isDataset=!1,this.isPublic=!1,this.type="RasterFunctionVariable"}};(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],w.prototype,"name",void 0),(0,o._)([(0,s.MZ)({type:Number,json:{type:l.jz,write:!0,name:"_object_id"}})],w.prototype,"id",void 0),(0,o._)([(0,s.MZ)({type:Boolean,json:{write:!0}})],w.prototype,"isDataset",void 0),(0,o._)([(0,s.MZ)({type:Boolean,json:{write:!0}})],w.prototype,"isPublic",void 0),(0,o._)([(0,s.MZ)({json:{write:!0}})],w.prototype,"value",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],w.prototype,"type",void 0),w=(0,o._)([(0,u.$)("esri.layers.support.RasterFunctionVariable")],w);const _={key:"type",base:null,typeMap:{RasterFunctionVariable:w}};let j=class extends i.A{};(0,o._)([(0,s.MZ)({types:_,json:{types:_,name:"MatchVariable"}})],j.prototype,"matchVariable",void 0),(0,o._)([(0,s.MZ)({types:_,json:{types:_,name:"UnionDimension"}})],j.prototype,"unionDimension",void 0),(0,o._)([(0,s.MZ)({type:Number,json:{type:l.jz,write:!0,name:"_object_id"}})],j.prototype,"id",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],j.prototype,"type",void 0),j=(0,o._)([(0,u.$)("esri.layers.support.RasterFunctionProperties")],j);const v=j,h=new c.J({0:"mosaic",1:"item",2:"item-group"},{useNumericKeys:!0});let g=class extends i.A{constructor(){super(...arguments),this.description="",this.functionType="mosaic",this.type="RasterFunctionTemplate"}};(0,o._)([(0,s.MZ)({type:[String],json:{write:!0}})],g.prototype,"aliases",void 0),(0,o._)([(0,s.MZ)({type:Object,json:{write:{isRequired:!0}}})],g.prototype,"arguments",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:{isRequired:!0}}})],g.prototype,"description",void 0),(0,o._)([(0,s.MZ)({type:f,json:{write:{isRequired:!0},name:"function"}})],g.prototype,"functionInfo",void 0),(0,o._)([(0,s.MZ)({type:h.apiValues,json:{type:[0,1,2],read:h.read,write:{writer:h.write,isRequired:!0}}})],g.prototype,"functionType",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],g.prototype,"group",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],g.prototype,"help",void 0),(0,o._)([(0,s.MZ)({type:Number,json:{type:l.jz,write:!0,name:"_object_id"}})],g.prototype,"id",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:{isRequired:!0}}})],g.prototype,"name",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0,name:"definition"}})],g.prototype,"queryDefinition",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],g.prototype,"tag",void 0),(0,o._)([(0,s.MZ)({type:v,json:{write:!0}})],g.prototype,"properties",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],g.prototype,"thumbnail",void 0),(0,o._)([(0,s.MZ)({type:String,json:{write:!0}})],g.prototype,"thumbnailEx",void 0),(0,o._)([(0,s.MZ)({json:{type:["RasterFunctionTemplate"],write:!0}})],g.prototype,"type",void 0),g=(0,o._)([(0,u.$)("esri.layers.support.RasterFunctionTemplate")],g);const F=g;var M;const S=new Set(["raster","raster2","dem","fillraster"]),Z=new Set(["rasters"]),b=t=>t?.rasterFunction?O.fromJSON(t):t,N=t=>t&&t instanceof O?t.toJSON():t,A=t=>t?.functionName&&!t.declaredClass,R=t=>A(t)?new O(t):t,C=t=>t?F.fromJSON({type:"RasterFunctionTemplate",...t}):void 0,D={types:{key:"type",base:null,typeMap:{RasterFunctionTemplate:F}},json:{write:!0,name:"rasterFunctionDefinition",read:C}};let O=M=class extends i.A{constructor(t){super(t),this.functionName=null,this.outputPixelType="unknown",this.variableName=null,this.functionDefinition=null}set functionArguments(t){if(t){const e=Object.keys(t);if(e.some((e=>S.has(e.toLowerCase())&&A(t[e])))||e.some((e=>Z.has(e.toLowerCase())&&Array.isArray(t[e])&&t[e].some((t=>A(t)))))){t=(0,r.clone)(t);for(const n of e)S.has(n.toLowerCase())?t[n]=R(t[n]):Z.has(n.toLowerCase())&&Array.isArray(t[n])&&(t[n]=t[n].map((t=>R(t))))}}this._set("functionArguments",t)}readFunctionArguments(t){return(t=>{if(null==t)return null;t=(0,r.clone)(t);const e={};for(const n of Object.keys(t))S.has(n.toLowerCase())?e[n]=b(t[n]):Z.has(n.toLowerCase())&&Array.isArray(t[n])?e[n]=t[n].map(b):e[n]=t[n];return e})(t)}writeFunctionArguments(t,e,n){const o={};for(const i of Object.keys(t))S.has(i.toLowerCase())?o[i]=N(t[i]):Z.has(i.toLowerCase())&&Array.isArray(t[i])?o[i]=t[i].map(N):o[i]=N(t[i]);e[n]=o}readFunctionName(t,e){const n=e.rasterFunctionInfos;return e.name||(n?.length&&"None"!==n[0].name?n[0].name:e.rasterFunction||e.rasterFunctionDefinition?.name)}get rasterFunctionDefinition(){return this.functionDefinition?.toJSON()}set rasterFunctionDefinition(t){this.functionDefinition=C(t)}get hasClipFunction(){return this.rasterFunctionDefinition?JSON.stringify(this.rasterFunctionDefinition).includes('"type":"ClipFunction"'):JSON.stringify(this).includes('"rasterFunction":"Clip"')}clone(){return new M({functionName:this.functionName,functionArguments:(0,r.clone)(this.functionArguments),outputPixelType:this.outputPixelType,variableName:this.variableName,rasterFunctionDefinition:(0,r.clone)(this.rasterFunctionDefinition)})}};(0,o._)([(0,s.MZ)({json:{type:Object,name:"rasterFunctionArguments"}})],O.prototype,"functionArguments",null),(0,o._)([(0,a.w)("functionArguments")],O.prototype,"readFunctionArguments",null),(0,o._)([(0,y.K)("functionArguments")],O.prototype,"writeFunctionArguments",null),(0,o._)([(0,s.MZ)({json:{type:String,write:{target:"rasterFunction"}}})],O.prototype,"functionName",void 0),(0,o._)([(0,a.w)("functionName",["rasterFunction","rasterFunctionInfos","rasterFunctionDefinition"])],O.prototype,"readFunctionName",null),(0,o._)([(0,p.e)({C128:"c128",C64:"c64",F32:"f32",F64:"f64",S16:"s16",S32:"s32",S8:"s8",U1:"u1",U16:"u16",U2:"u2",U32:"u32",U4:"u4",U8:"u8",UNKNOWN:"unknown"},{ignoreUnknown:!1,default:"unknown"})],O.prototype,"outputPixelType",void 0),(0,o._)([(0,s.MZ)({type:String,json:{read:!0,write:!0}})],O.prototype,"variableName",void 0),(0,o._)([(0,s.MZ)()],O.prototype,"rasterFunctionDefinition",null),(0,o._)([(0,s.MZ)(D)],O.prototype,"functionDefinition",void 0),(0,o._)([(0,s.MZ)()],O.prototype,"hasClipFunction",null),O=M=(0,o._)([(0,u.$)("esri.layers.support.RasterFunction")],O);const U=O}}]);