"use strict";(self.webpackChunkever_wading_birds=self.webpackChunkever_wading_birds||[]).push([[21543,61531],{21543:(t,e,n)=>{n.d(e,{$Q:()=>x,FI:()=>g,KL:()=>u,Lu:()=>c,MD:()=>h,Rn:()=>m,Ud:()=>B,Wu:()=>C,Y2:()=>d,gf:()=>T});var i=n(42761),l=n(61531),s=n(50396);const o=new Map;o.set("meter-per-second",1),o.set("kilometer-per-hour",.277778),o.set("knots",.514444),o.set("feet-per-second",.3048),o.set("mile-per-hour",.44704);const r=180/Math.PI,a=5,h=new i.J({esriMetersPerSecond:"meter-per-second",esriKilometersPerHour:"kilometer-per-hour",esriKnots:"knots",esriFeetPerSecond:"feet-per-second",esriMilesPerHour:"mile-per-hour"});function u(t,e){return o.get(t)/o.get(e)||1}function f(t){return(450-t)%360}function c(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"geographic";const[n,i]=t,l=Math.sqrt(n*n+i*i);let s=Math.atan2(i,n)*r;return s=(360+s)%360,"geographic"===e&&(s=f(s)),[l,s]}function p(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"geographic",n=t[1];"geographic"===e&&(n=f(n)),n%=360;const i=t[0];return[i*Math.cos(n/r),i*Math.sin(n/r)]}function d(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"geographic";if(!(0,s.AB)(t)||null==n)return t;const l="vector-magdir"===e?t.clone():g(t,e),o=l.pixels[1];for(let s=0;s<o.length;s++)o[s]="geographic"===i?(o[s]+n[s]+270)%360:(o[s]+360-n[s])%360;return"vector-magdir"===e?l:g(l,"vector-magdir")}function g(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"geographic",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if(!(0,s.AB)(t))return t;const{pixels:o,width:r,height:a}=t,h=r*a,u=o[0],f=o[1],d=t.pixelType.startsWith("f")?t.pixelType:"f32",g=l.default.createEmptyBand(d,h),m=l.default.createEmptyBand(d,h);let x=0;for(let l=0;l<a;l++)for(let t=0;t<r;t++)"vector-uv"===e?([g[x],m[x]]=c([u[x],f[x]],n),g[x]*=i):([g[x],m[x]]=p([u[x],f[x]],n),g[x]*=i,m[x]*=i),x++;const y=new l.default({pixelType:d,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:[g,m]});return y.updateStatistics(),y}function m(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(1===n||!(0,s.AB)(t))return t;const i=t.clone(),{pixels:l,width:o,height:r}=i,a=l[0],h=l[1];let u=0;for(let s=0;s<r;s++)for(let t=0;t<o;t++)"vector-uv"===e?(a[u]*=n,h[u]*=n):a[u]*=n,u++;return i.updateStatistics(),i}function x(t,e,n,i,l){if(null==l||!l.spatialReference.equals(t.spatialReference))return{extent:t,width:Math.round(e/i),height:Math.round(n/i),resolution:t.width/e};const s=l.xmin,o=l.ymax,r=(t.xmax-t.xmin)/e*i,a=(t.ymax-t.ymin)/n*i,h=(r+a)/2;return t.xmin=s+Math.floor((t.xmin-s)/r)*r,t.xmax=s+Math.ceil((t.xmax-s)/r)*r,t.ymin=o+Math.floor((t.ymin-o)/a)*a,t.ymax=o+Math.ceil((t.ymax-o)/a)*a,{extent:t,width:Math.round(t.width/r),height:Math.round(t.height/a),resolution:h}}const y=w(0,0,0);function w(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Math.PI,i=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];i&&(n=(2*Math.PI-n)%(2*Math.PI));const l=i?-1:1,s=13*l,o=-7*l,r=-2*l,a=-16*l,h=21.75,[u,f]=M(0,e+s,n,h),[c,p]=M(t-5.5,e+o,n,h),[d,g]=M(t+5.5,e+o,n,h),[m,x]=M(t-1.5,e+r,n,h),[y,w]=M(t+1.5,e+r,n,h),[k,A]=M(t-1.5,e+a,n,h),[v,b]=M(t+1.5,e+a,n,h);return[u,f,c,p,m,x,y,w,d,g,k,A,v,b]}function k(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Math.PI,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];n&&(e=(2*Math.PI-e)%(2*Math.PI));const i=n?-1:1,l=5*i,s=20*i,o=25*i,r=45,h=2*i,u=n?1:-1,f=5*u;let[c,p]=[0+f,0-s],[d,g]=[c+2*u,p],[m,x]=[d-0*u,g+h],[y,w]=[0-f,0-o],[k,A]=[y+0*u,w-h],v=Math.ceil(t/a),b=Math.floor(v/10);v-=8*b;const U=[],P=[];for(let a=0;a<v/2;a++,b--){b<=0&&v%2==1&&a===(v-1)/2&&(y=0,k=y+0*u,w=(w+p)/2,A=w-h);const[t,n]=M(y,w,e,r);if(b>0){const[i,l]=M(d,w,e,r),[s,o]=M(c,p,e,r);U.push(i),U.push(l),U.push(t),U.push(n),U.push(s),U.push(o)}else{const[i,l]=M(d,g,e,r),[s,o]=M(m,x,e,r),[a,h]=M(k,A,e,r);P.push(t),P.push(n),P.push(a),P.push(h),P.push(s),P.push(o),P.push(i),P.push(l)}w+=l,p+=l,g+=l,x+=l,A+=l}const[_,B]=M(0+f,0+s,e,r),T=7*u,[C,I]=M(0+T,0+s,e,r),[S,F]=M(0+f,0-o,e,r),[N,R]=M(0+T,0-o,e,r);return{pennants:U,barbs:P,shaft:[_,B,C,I,S,F,N,R]}}function M(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;const l=Math.sqrt(t*t+e*e)/i,s=(2*Math.PI+Math.atan2(e,t))%(2*Math.PI);return[l,(2*Math.PI+s-n)%(2*Math.PI)]}const A=[0,1,3,6,10,16,21,27,33,40,47,55,63],v=[0,.5,1,1.5,2],b=[0,.25,.5,1,1.5,2,2.5,3,3.5,4];function U(t,e,n,i){const l=u(i||"knots",n);let s;for(s=1;s<e.length;s++)if(s===e.length-1){if(t<e[s]*l)break}else if(t<=e[s]*l)break;return Math.min(s-1,e.length-2)}function P(t,e,n,i,l){let s=0;switch(e){case"beaufort_kn":s=U(t,A,"knots",n);break;case"beaufort_km":s=U(t,A,"kilometer-per-hour",n);break;case"beaufort_ft":s=U(t,A,"feet-per-second",n);break;case"beaufort_m":s=U(t,A,"meter-per-second",n);break;case"classified_arrow":s=U(t,l??[],i,n);break;case"ocean_current_m":s=U(t,v,"meter-per-second",n);break;case"ocean_current_kn":s=U(t,b,"knots",n)}return s}const _=[];function B(t,e){let n=0,i=0;const{width:l,height:s,mask:o}=t,r=t.pixels[0],f=[],c=[],p=u(h.fromJSON(e.inputUnit),"knots"),d="wind_speed"===e.style?a:Number.MAX_VALUE;for(let a=0;a<s;a++)for(let t=0;t<l;t++){const e=r[a*l+t]*p;if((!o||o[a*l+t])&&e<d){for(let i=0;i<4;i++)f[n++]=(t+.5)/l,f[n++]=(a+.5)/s,f[n++]=i<2?-.5:.5,f[n++]=i%2==0?-.5:.5,f[n++]=0,f[n++]=e;const o=4*(n/24-1);c[i++]=o,c[i++]=o+1,c[i++]=o+2,c[i++]=o+1,c[i++]=o+2,c[i++]=o+3}}return{vertexData:new Float32Array(f),indexData:new Uint32Array(c)}}function T(t,e){return"simple_scalar"===e.style?B(t,e):"wind_speed"===e.style?function(t,e){if(0===_.length)for(let a=0;a<30;a++)_.push(k(5*a,0,!e.invertDirection));const n=u(h.fromJSON(e.inputUnit),"knots"),{width:i,height:l,mask:s}=t,o=t.pixels[0],r=t.pixels[1],f=[],c=[];let p=0,d=0;for(let h=0;h<l;h++)for(let t=0;t<i;t++){const e=h*i+t,u=o[e]*n;if((!s||s[h*i+t])&&u>=a){const n=(r[e]+360)%360/180*Math.PI,{pennants:s,barbs:o,shaft:a}=_[Math.min(Math.floor(u/5),29)];if(s.length+o.length===0)continue;let g=f.length/6;const m=(t+.5)/i,x=(h+.5)/l;for(let t=0;t<s.length;t+=2)f[p++]=m,f[p++]=x,f[p++]=s[t],f[p++]=s[t+1]+n,f[p++]=0,f[p++]=u;for(let t=0;t<o.length;t+=2)f[p++]=m,f[p++]=x,f[p++]=o[t],f[p++]=o[t+1]+n,f[p++]=0,f[p++]=u;for(let t=0;t<a.length;t+=2)f[p++]=m,f[p++]=x,f[p++]=a[t],f[p++]=a[t+1]+n,f[p++]=0,f[p++]=u;for(let t=0;t<s.length/6;t++)c[d++]=g,c[d++]=g+1,c[d++]=g+2,g+=3;for(let t=0;t<o.length/8;t++)c[d++]=g,c[d++]=g+1,c[d++]=g+2,c[d++]=g+1,c[d++]=g+2,c[d++]=g+3,g+=4;c[d++]=g+0,c[d++]=g+1,c[d++]=g+2,c[d++]=g+1,c[d++]=g+3,c[d++]=g+2,g+=4}}return{vertexData:new Float32Array(f),indexData:new Uint32Array(c)}}(t,e):function(t,e){const{style:n,inputUnit:i,outputUnit:l,breakValues:s}=e,o=h.fromJSON(i),r=h.fromJSON(l);let a=0,u=0;const{width:f,height:c,mask:p}=t,d=t.pixels[0],g=t.pixels[1],m=null!=p?p.filter((t=>t>0)).length:f*c,x=new Float32Array(42*m),k=new Uint32Array(15*m),M=e.invertDirection?w(0,0,0,!1):y;for(let h=0;h<c;h++)for(let t=0;t<f;t++){const e=h*f+t;if(!p||p[h*f+t]){const i=(g[e]+360)%360/180*Math.PI,l=P(d[e],n,o,r,s);for(let n=0;n<M.length;n+=2)x[a++]=(t+.5)/f,x[a++]=(h+.5)/c,x[a++]=M[n],x[a++]=M[n+1]+i,x[a++]=l,x[a++]=d[e];const p=7*(a/42-1);k[u++]=p,k[u++]=p+1,k[u++]=p+2,k[u++]=p+0,k[u++]=p+4,k[u++]=p+3,k[u++]=p+0,k[u++]=p+2,k[u++]=p+3,k[u++]=p+2,k[u++]=p+5,k[u++]=p+3,k[u++]=p+5,k[u++]=p+6,k[u++]=p+3}}return{vertexData:x,indexData:k}}(t,e)}function C(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0,0],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const{width:o,height:r,mask:a}=t,[h,u]=t.pixels,[f,d]=i,g=Math.round((o-f)/n),m=Math.round((r-d)/n),x=g*m,y=new Float32Array(x),w=new Float32Array(x),k=new Uint8Array(x),M="vector-uv"===e;for(let l=0;l<m;l++)for(let t=0;t<g;t++){let e=0;const i=l*g+t,m=Math.max(0,l*n+d),x=Math.max(0,t*n+f),A=Math.min(r,m+n),v=Math.min(o,x+n);for(let t=m;t<A;t++)for(let n=x;n<v;n++){const l=t*o+n;if(!a||a[l]){e++;const t=M?[h[l],u[l]]:[h[l],(360+u[l])%360],[n,s]=M?t:p(t);y[i]+=n,w[i]+=s}}if(e>=(A-m)*(v-x)*(1-s)){k[i]=1;const[t,n]=c([y[i]/e,w[i]/e]);y[i]=t,w[i]=n}else k[i]=0,y[i]=0,w[i]=0}const A=new l.default({width:g,height:m,pixels:[y,w],mask:k});return A.updateStatistics(),A}},50396:(t,e,n)=>{n.d(e,{$Q:()=>I,$i:()=>L,AB:()=>h,Ew:()=>m,Hx:()=>g,IB:()=>i,J$:()=>N,LY:()=>v,QF:()=>E,UK:()=>d,Wb:()=>l,Wt:()=>A,Wy:()=>u,XU:()=>M,dK:()=>k,eH:()=>p,et:()=>a,lD:()=>F,qL:()=>c,z$:()=>P,z7:()=>U,zg:()=>f});var i,l,s,o=n(61531),r=n(82518);(s=i||(i={}))[s.matchAny=0]="matchAny",s[s.matchAll=1]="matchAll",function(t){t[t.bestMatch=0]="bestMatch",t[t.fail=1]="fail"}(l||(l={}));const a=6;function h(t){return null!=t&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0}function u(t){if(!t?.length||t.some((t=>!h(t))))return null;if(1===t.length)return t[0]?.clone()??null;const e=t,{width:n,height:i,pixelType:l}=e[0];if(e.some((t=>t.width!==n||t.height!==i)))return null;const s=e.map((t=>{let{mask:e}=t;return e})).filter((t=>null!=t));let r=null;s.length&&(r=new Uint8Array(n*i),r.set(s[0]),s.length>1&&w(s.slice(1),r));const a=[];e.forEach((t=>{let{pixels:e}=t;return a.push(...e)}));const u=e.map((t=>{let{statistics:e}=t;return e})).filter((t=>t?.length)),f=[];return u.forEach((t=>f.push(...t))),new o.default({pixelType:l,width:n,height:i,mask:r,pixels:a,statistics:f.length?f:null})}function f(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const n=e.sort(((t,e)=>t[0]-e[0]));let i=0;n[0][0]<0&&(i=n[0][0]);const l=Math.max(256,n[n.length-1][0]-i+1),s=new Uint8Array(4*l),o=[];let r,a=0,h=0;const u=5===n[0].length;if(l>65536)return n.forEach((t=>{o[t[0]-i]=u?t.slice(1):t.slice(1).concat([255])})),{indexed2DColormap:o,offset:i,alphaSpecified:u};if(t.fillUnspecified)for(r=n[h],a=r[0]-i;a<l;a++)s[4*a]=r[1],s[4*a+1]=r[2],s[4*a+2]=r[3],s[4*a+3]=u?r[4]:255,a===r[0]-i&&(r=h===n.length-1?r:n[++h]);else for(a=0;a<n.length;a++)r=n[a],h=4*(r[0]-i),s[h]=r[1],s[h+1]=r[2],s[h+2]=r[3],s[h+3]=u?r[4]:255;return{indexedColormap:s,offset:i,alphaSpecified:u}}function c(t,e){if(!h(t))return t;if(!e||!e.indexedColormap&&!e.indexed2DColormap)return t;const n=t.clone(),i=n.pixels;let l=n.mask;const s=n.width*n.height;if(1!==i.length)return t;const{indexedColormap:o,indexed2DColormap:r,offset:a,alphaSpecified:u}=e;let f=0;const c=i[0],p=new Uint8Array(c.length),d=new Uint8Array(c.length),g=new Uint8Array(c.length);let m,x=0;if(o){const t=o.length-1;if(null!=l)for(f=0;f<s;f++)l[f]&&(x=4*(c[f]-a),x<a||x>t?l[f]=0:(p[f]=o[x],d[f]=o[x+1],g[f]=o[x+2],l[f]=o[x+3]));else{for(l=new Uint8Array(s),f=0;f<s;f++)x=4*(c[f]-a),x<a||x>t?l[f]=0:(p[f]=o[x],d[f]=o[x+1],g[f]=o[x+2],l[f]=o[x+3]);n.mask=l}}else if(r)if(null!=l)for(f=0;f<s;f++)l[f]&&(m=r[c[f]],p[f]=m[0],d[f]=m[1],g[f]=m[2],l[f]=m[3]);else{for(l=new Uint8Array(s),f=0;f<s;f++)m=r[c[f]],p[f]=m[0],d[f]=m[1],g[f]=m[2],l[f]=m[3];n.mask=l}return n.pixels=[p,d,g],n.statistics=null,n.pixelType="u8",n.maskIsAlpha=u,n}function p(t,e){if(!h(t))return null;const{pixels:n,mask:i}=t,l=n.length;let s=e.lut;const{offset:r}=e;s&&1===s[0].length&&(s=n.map((()=>s)));const a=[],u=e.outputPixelType||"u8";for(let o=0;o<l;o++){const t=d(n[o],i,s[o],r||0,u);a.push(t)}const f=new o.default({width:t.width,height:t.height,pixels:a,mask:i,pixelType:u});return f.updateStatistics(),f}function d(t,e,n,i,l){const s=t.length,r=o.default.createEmptyBand(l,s);if(e)for(let o=0;o<s;o++)e[o]&&(r[o]=n[t[o]-i]);else for(let o=0;o<s;o++)r[o]=n[t[o]-i];return r}function g(t,e){if(!h(t))return null;const n=t.clone(),{pixels:i}=n,l=n.width*n.height,s=e.length,o=Math.floor(s/2),r=e[Math.floor(o)],a=i[0];let u,f,c,p,d,g,m=!1;const x=new Uint8Array(l),y=new Uint8Array(l),w=new Uint8Array(l);let k=n.mask;const M=4===e[0].mappedColor.length;for(k||(k=new Uint8Array(l),k.fill(M?255:1),n.mask=k),d=0;d<l;d++)if(k[d]){for(u=a[d],m=!1,g=o,f=r,c=0,p=s-1;p-c>1;){if(u===f.value){m=!0;break}u>f.value?c=g:p=g,g=Math.floor((c+p)/2),f=e[Math.floor(g)]}m||(u===e[c].value?(f=e[c],m=!0):u===e[p].value?(f=e[p],m=!0):u<e[c].value?(m=!1,f=null):u>e[c].value&&(u<e[p].value?(f=e[c],m=!0):p===s-1?(m=!1,f=null):(f=e[p],m=!0))),m?(x[d]=f.mappedColor[0],y[d]=f.mappedColor[1],w[d]=f.mappedColor[2],k[d]=f.mappedColor[3]):x[d]=y[d]=w[d]=k[d]=0}return n.pixels=[x,y,w],n.mask=k,n.pixelType="u8",n.maskIsAlpha=M,n}function m(t,e){if(!h(t))return null;const{width:n,height:i}=t,{inputRanges:l,outputValues:s,outputPixelType:a,noDataRanges:u,allowUnmatched:f,isLastInputRangeInclusive:c}=e,p=t.pixels[0],d=o.default.createEmptyBand(a,p.length),g=t.mask,m=new Uint8Array(n*i);g?m.set(g):m.fill(255);const x=t.pixelType.startsWith("f")?1e-6:0,y=l.map((t=>t-x));y[0]=l[0],y[y.length-1]=l[l.length-1]+(c?1e-6:0);const w=l.length/2,[k,M]=(0,r.hP)(a);for(let o=0;o<i;o++)for(let t=0;t<n;t++){const e=o*n+t;if(m[e]){const t=p[e];let n=!1;for(let i=w-1;i>=0;i--)if(t===y[2*i]||t>y[2*i]&&t<y[2*i+1]){d[e]=s[i],n=!0;break}n||(f?d[e]=t>M?M:t<k?k:t:m[e]=0)}}const A=u?.length;if(A)for(let o=0;o<i;o++)for(let t=0;t<n;t++){const e=o*n+t;if(!g||g[e]){const t=p[e];for(let n=0;n<A;n+=2)if(t>=u[n]&&t<=u[n+1]){d[e]=0,m[e]=0;break}}}return new o.default({width:n,height:i,pixelType:a,pixels:[d],mask:m})}function x(t,e,n,i){const l=null!=n&&n.length>=2?new Set(n):null,s=1===n?.length?n[0]:null,o=!!e?.length;for(let r=0;r<t.length;r++)if(i[r]){const n=t[r];if(o){let t=!1;for(let i=0;i<e.length;i+=2)if(n>=e[i]&&n<=e[i+1]){t=!0;break}t||(i[r]=0)}i[r]&&(n===s||l?.has(n))&&(i[r]=0)}}function y(t,e){const n=t[0].length;for(let i=0;i<n;i++)if(e[i]){let n=!1;for(let e=0;e<t.length;e++)if(t[e][i]){n=!0;break}n||(e[i]=0)}}function w(t,e){const n=t[0].length;for(let i=0;i<n;i++)if(e[i]){let n=!1;for(let e=0;e<t.length;e++)if(0===t[e][i]){n=!0;break}n&&(e[i]=0)}}function k(t,e){if(!h(t))return null;const{width:n,height:i,pixels:l}=t,s=n*i,r=new Uint8Array(s);t.mask?r.set(t.mask):r.fill(255);const a=l.length,{includedRanges:u,noDataValues:f,outputPixelType:c,matchAll:p,lookups:g}=e;if(g){const t=[];for(let e=0;e<a;e++){const n=g[e],i=d(l[e],r,n.lut,n.offset||0,"u8");t.push(i)}1===t.length?r.set(t[0]):p?y(t,r):w(t,r)}else if(p){const t=[];for(let e=0;e<a;e++){const n=new Uint8Array(s);n.set(r),x(l[e],u?.slice(2*e,2*e+2),f?.[e],n),t.push(n)}1===t.length?r.set(t[0]):y(t,r)}else for(let o=0;o<a;o++)x(l[o],u?.slice(2*o,2*o+2),f?.[o],r);return new o.default({width:n,height:i,pixelType:c,pixels:l,mask:r})}function M(t){const{srcPixelType:e,inputRanges:n,outputValues:i,allowUnmatched:l,noDataRanges:s,isLastInputRangeInclusive:a,outputPixelType:h}=t;if("u8"!==e&&"s8"!==e&&"u16"!==e&&"s16"!==e)return null;const u=e.includes("16")?65536:256,f=e.includes("s")?-u/2:0,c=o.default.createEmptyBand(h,u),p=new Uint8Array(u);l&&p.fill(255);const[d,g]=(0,r.hP)(h);if(n?.length&&i?.length){const t=1e-6,e=n.map((e=>e-t));e[0]=n[0],a&&(e[e.length-1]=n[n.length-1]);for(let n=0;n<e.length;n++){const t=i[n]>g?g:i[n]<d?d:i[n],l=Math.ceil(e[2*n]-f),s=Math.floor(e[2*n+1]-f);for(let e=l;e<=s;e++)c[e]=t,p[e]=255}}if(s?.length)for(let o=0;o<s.length;o++){const t=Math.ceil(s[2*o]-f),e=Math.floor(s[2*o+1]-f);for(let n=t;n<=e;n++)p[n]=0}return{lut:c,offset:f,mask:p}}function A(t,e,n){if("u8"!==t&&"s8"!==t&&"u16"!==t&&"s16"!==t)return null;const i=t.includes("16")?65536:256,l=t.includes("s")?-i/2:0,s=new Uint8Array(i);if(e)for(let o=0;o<e.length;o++){const t=Math.ceil(e[2*o]-l),n=Math.floor(e[2*o+1]-l);for(let e=t;e<=n;e++)s[e]=255}else s.fill(255);if(n)for(let o=0;o<n.length;o++)s[n[o]-l]=0;return{lut:s,offset:l}}function v(t,e){if(!t||0===t.length)return null;const n=t.find((t=>t.pixelBlock));if(null==n?.pixelBlock)return null;const i=(n.extent.xmax-n.extent.xmin)/n.pixelBlock.width,l=(n.extent.ymax-n.extent.ymin)/n.pixelBlock.height,s=.01*Math.min(i,l),o=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>s?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>s?t.extent.xmin-e.extent.xmin:0)),r=Math.min.apply(null,o.map((t=>t.extent.xmin))),a=Math.min.apply(null,o.map((t=>t.extent.ymin))),h=Math.max.apply(null,o.map((t=>t.extent.xmax))),u=Math.max.apply(null,o.map((t=>t.extent.ymax))),f={x:Math.round((e.xmin-r)/i),y:Math.round((u-e.ymax)/l)},c={width:Math.round((h-r)/i),height:Math.round((u-a)/l)},p={width:Math.round((e.xmax-e.xmin)/i),height:Math.round((e.ymax-e.ymin)/l)};return Math.round(c.width/n.pixelBlock.width)*Math.round(c.height/n.pixelBlock.height)!==o.length||f.x<0||f.y<0||c.width<p.width||c.height<p.height?null:{extent:e,pixelBlock:U(o.map((t=>t.pixelBlock)),c,{clipOffset:f,clipSize:p})}}function b(t,e,n,i,l,s){const{width:o,height:r}=n.block,{x:a,y:h}=n.offset,{width:u,height:f}=n.mosaic,c=function(t,e,n,i,l,s,o,r){return{xmin:l<=n*t?0:l<n*t+t?l-n*t:t,ymin:s<=i*e?0:s<i*e+e?s-i*e:e,xmax:l+o<=n*t?0:l+o<n*t+t?l+o-n*t:t,ymax:s+r<=i*e?0:s+r<i*e+e?s+r-i*e:e}}(o,r,i,l,a,h,u,f);let p=0,d=0;if(s){const t=s.hasGCSSShiftTransform?360:s.halfWorldWidth??0,e=o*s.resolutionX,n=s.startX+i*e;n<t&&n+e>t?d=s.rightPadding:n>=t&&(p=s.leftMargin-s.rightPadding,d=0)}if(c.xmax-=d,"number"!=typeof e)for(let g=c.ymin;g<c.ymax;g++){const n=(l*r+g-h)*u+(i*o-a)+p,s=g*o;for(let i=c.xmin;i<c.xmax;i++)t[n+i]=e[s+i]}else for(let g=c.ymin;g<c.ymax;g++){const n=(l*r+g-h)*u+(i*o-a)+p;for(let i=c.xmin;i<c.xmax;i++)t[n+i]=e}}function U(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{clipOffset:i,clipSize:l,alignmentInfo:s,blockWidths:r}=n;if(r)return function(t,e,n){const i=t.find((t=>null!=t));if(null==i)return null;const l=t.some((t=>null==t||!!t.mask)),{width:s,height:r}=e,a=l?new Uint8Array(s*r):null,{blockWidths:u}=n,f=[],c=i.getPlaneCount(),p=o.default.getPixelArrayConstructor(i.pixelType);if(l)for(let o=0,y=0;o<t.length;y+=u[o],o++){const e=t[o];if(!h(e))continue;const n=e.mask;for(let t=0;t<r;t++)for(let i=0;i<u[o];i++)a[t*s+i+y]=null==n?255:n[t*e.width+i]}const d=t.some((t=>t?.bandMasks&&t.bandMasks.length>1)),g=d?[]:void 0,m=s*r;for(let o=0;o<c;o++){const e=new p(m),n=d?new Uint8Array(m):void 0;for(let i=0,l=0;i<t.length;l+=u[i],i++){const a=t[i];if(!h(a))continue;const f=a.pixels[o];if(null!=f){for(let t=0;t<r;t++)for(let n=0;n<u[i];n++)e[t*s+n+l]=f[t*a.width+n];if(n){const t=a.bandMasks?.[o]??a.mask;for(let e=0;e<r;e++)for(let o=0;o<u[i];o++)n[e*s+o+l]=t?t[e*a.width+o]:255}}}f.push(e),g&&n&&g.push(n)}const x=new o.default({width:s,height:r,mask:a,bandMasks:g,pixels:f,pixelType:i.pixelType});return x.updateStatistics(),x}(t,e,{blockWidths:r});const a=t.find((t=>h(t)));if(null==a)return null;const u=l?l.width:e.width,f=l?l.height:e.height,c=a.width,p=a.height,d=e.width/c,g=e.height/p,m={offset:i||{x:0,y:0},mosaic:l||e,block:{width:c,height:p}},x=a.pixelType,y=o.default.getPixelArrayConstructor(x),w=a.pixels.length,k=[];let M,A;for(let o=0;o<w;o++){A=new y(u*f);for(let e=0;e<g;e++)for(let n=0;n<d;n++){const i=t[e*d+n];h(i)&&(M=i.pixels[o],b(A,M,m,n,e,s))}k.push(A)}const v=t.some((t=>null==t||null!=t.mask&&t.mask.length>0)),U=t.some((t=>t?.bandMasks&&t.bandMasks.length>1)),P=v?new Uint8Array(u*f):void 0,_=U?[]:void 0;if(P){for(let e=0;e<g;e++)for(let n=0;n<d;n++){const i=t[e*d+n],l=null!=i?i.mask:null;b(P,null!=l?l:i?255:0,m,n,e,s)}if(_)for(let e=0;e<w;e++){const n=new Uint8Array(u*f);for(let i=0;i<g;i++)for(let l=0;l<d;l++){const o=t[i*d+l],r=o?.bandMasks?.[e]??o?.mask;b(n,null!=r?r:o?255:0,m,l,i,s)}_.push(n)}}const B=new o.default({width:u,height:f,pixels:k,pixelType:x,bandMasks:_,mask:P});return B.updateStatistics(),B}function P(t,e,n){if(!h(t))return null;const{width:i,height:l}=t,s=e.x,o=e.y,r=n.width+s,a=n.height+o;if(s<0||o<0||r>i||a>l)return t;if(0===s&&0===o&&r===i&&a===l)return t;t.mask||(t.mask=new Uint8Array(i*l));const u=t.mask;for(let h=0;h<l;h++){const t=h*i;for(let e=0;e<i;e++)u[t+e]=h<o||h>=a||e<s||e>=r?0:1}return t.updateStatistics(),t}function _(t){if(!h(t))return null;const e=t.clone(),{width:n,height:i,pixels:l}=t,s=l[0],o=e.pixels[0],r=t.mask;for(let a=2;a<i-1;a++){const t=new Map;for(let i=a-2;i<a+2;i++)for(let e=0;e<4;e++){const l=i*n+e;C(t,s[l],r?r[l]:1)}o[a*n]=B(t),o[a*n+1]=o[a*n+2]=o[a*n];let e=3;for(;e<n-1;e++){let i=(a-2)*n+e+1;C(t,s[i],r?r[i]:1),i=(a-1)*n+e+1,C(t,s[i],r?r[i]:1),i=a*n+e+1,C(t,s[i],r?r[i]:1),i=(a+1)*n+e+1,C(t,s[i],r?r[i]:1),i=(a-2)*n+e-3,T(t,s[i],r?r[i]:1),i=(a-1)*n+e-3,T(t,s[i],r?r[i]:1),i=a*n+e-3,T(t,s[i],r?r[i]:1),i=(a+1)*n+e-3,T(t,s[i],r?r[i]:1),o[a*n+e]=B(t)}o[a*n+e+1]=o[a*n+e]}for(let a=0;a<n;a++)o[a]=o[n+a]=o[2*n+a],o[(i-1)*n+a]=o[(i-2)*n+a];return e.updateStatistics(),e}function B(t){if(0===t.size)return 0;let e=0,n=-1,i=0;const l=t.keys();let s=l.next();for(;!s.done;)i=t.get(s.value),i>e&&(n=s.value,e=i),s=l.next();return n}function T(t,e,n){if(0===n)return;const i=t.get(e);1===i?t.delete(e):t.set(e,i-1)}function C(t,e,n){0!==n&&t.set(e,t.has(e)?t.get(e)+1:1)}function I(t,e,n){let{x:i,y:l}=e;const{width:s,height:r}=n;if(0===i&&0===l&&r===t.height&&s===t.width)return t;const{width:a,height:u}=t,f=Math.max(0,l),c=Math.max(0,i),p=Math.min(i+s,a),d=Math.min(l+r,u);if(p<0||d<0||!h(t))return null;i=Math.max(0,-i),l=Math.max(0,-l);const{pixels:g}=t,m=s*r,x=g.length,y=[];for(let h=0;h<x;h++){const e=g[h],n=o.default.createEmptyBand(t.pixelType,m);for(let t=f;t<d;t++){const o=t*a;let r=(t+l-f)*s+i;for(let t=c;t<p;t++)n[r++]=e[o+t]}y.push(n)}const w=new Uint8Array(m),k=t.mask;for(let o=f;o<d;o++){const t=o*a;let e=(o+l-f)*s+i;for(let n=c;n<p;n++)w[e++]=k?k[t+n]:1}const M=new o.default({width:n.width,height:n.height,pixelType:t.pixelType,pixels:y,mask:w});return M.updateStatistics(),M}function S(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(!h(t))return null;const{pixels:n,width:i,height:l,mask:s,pixelType:r}=t,a=[],u=Math.round(i/2),f=Math.round(l/2),c=l-1,p=i-1;for(let h=0;h<n.length;h++){const t=n[h],s=o.default.createEmptyBand(r,u*f);let d=0;for(let n=0;n<l;n+=2)for(let l=0;l<i;l+=2){const o=t[n*i+l];if(e){const e=l===p?o:t[n*i+l+1],r=n===c?o:t[n*i+l+i],a=l===p?r:n===c?e:t[n*i+l+i+1];s[d++]=(o+e+r+a)/4}else s[d++]=o}a.push(s)}let d=null;if(null!=s){d=new Uint8Array(u*f);let t=0;for(let n=0;n<l;n+=2)for(let l=0;l<i;l+=2){const o=s[n*i+l];if(e){const e=l===p?o:s[n*i+l+1],r=n===c?o:s[n*i+l+i],a=l===p?r:n===c?e:s[n*i+l+i+1];d[t++]=o*e*r*a?1:0}else d[t++]=o}}return new o.default({width:u,height:f,pixelType:r,pixels:a,mask:d})}function F(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];if(!h(t))return null;const{width:l,height:s}=e;let{width:o,height:r}=t;const a=new Map,u={x:0,y:0},f=1+n;let c=t;for(let h=0;h<f;h++){const t=Math.ceil(o/l),n=Math.ceil(r/s);for(let i=0;i<n;i++){u.y=i*s;for(let n=0;n<t;n++){u.x=n*l;const t=I(c,u,e);a.set(`${h}/${i}/${n}`,t)}}h<f-1&&(c=S(c,i)),o=Math.round(o/2),r=Math.round(r/2)}return a}function N(t){const{pixelBlock:e,tileSize:n,level:i,row:l,col:s,useBilinear:o}=t;if(!h(e))return null;const{width:r,height:a}=n,u=2**i,f=u*r,c=u*a;let p=I(e,{y:l*c,x:s*f},{width:f,height:c});if(!p)return null;for(let h=i;h>0;h--)p=S(p,o);return p}function R(t,e,n,i){let l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;const{width:s,height:o}=t,{width:r,height:a}=e,h=i.cols,u=i.rows,f=Math.ceil(r/h-.1/h),c=Math.ceil(a/u-.1/u);let p,d,g,m,x,y,w;const k=f*h,M=k*c*u,A=new Float32Array(M),v=new Float32Array(M),b=new Uint32Array(M),U=new Uint32Array(M);let P,_,B=0;for(let T=0;T<c;T++)for(let t=0;t<f;t++){p=12*(T*f+t),d=n[p],g=n[p+1],m=n[p+2],x=n[p+3],y=n[p+4],w=n[p+5];for(let e=0;e<u;e++){B=(T*u+e)*k+t*h,_=(e+.5)/u;for(let t=0;t<e;t++)P=(t+.5)/h,A[B+t]=(d*P+g*_+m)*s+l,v[B+t]=(x*P+y*_+w)*o+l,b[B+t]=Math.floor(A[B+t]),U[B+t]=Math.floor(v[B+t])}p+=6,d=n[p],g=n[p+1],m=n[p+2],x=n[p+3],y=n[p+4],w=n[p+5];for(let e=0;e<u;e++){B=(T*u+e)*k+t*h,_=(e+.5)/u;for(let t=e;t<h;t++)P=(t+.5)/h,A[B+t]=(d*P+g*_+m)*s+l,v[B+t]=(x*P+y*_+w)*o+l,b[B+t]=Math.floor(A[B+t]),U[B+t]=Math.floor(v[B+t])}}return{offsets_x:A,offsets_y:v,offsets_xi:b,offsets_yi:U,gridWidth:k}}function E(t,e){const{coefficients:n,spacing:i}=e,{offsets_x:l,offsets_y:s,gridWidth:o}=R(t,t,n,{rows:i[0],cols:i[1]}),{width:r,height:a}=t,h=new Float32Array(r*a),u=180/Math.PI;for(let f=0;f<a;f++)for(let t=0;t<r;t++){const e=f*o+t,n=0===f?e:e-o,i=f===a-1?e:e+o,c=l[n]-l[i],p=s[i]-s[n];if(isNaN(c)||isNaN(p))h[f*r+t]=90;else{let e=Math.atan2(p,c)*u;e=(360+e)%360,h[f*r+t]=e}}return h}function L(t,e,n,i){let l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"nearest";if(!h(t))return null;"majority"===l&&(t=_(t));const{pixels:s,mask:r,bandMasks:a,pixelType:u}=t,f=t.width,c=t.height,p=o.default.getPixelArrayConstructor(u),d=s.length,{width:g,height:m}=e;let x=!1;for(let o=0;o<n.length;o+=3)-1===n[o]&&-1===n[o+1]&&-1===n[o+2]&&(x=!0);const{offsets_x:y,offsets_y:w,offsets_xi:k,offsets_yi:M,gridWidth:A}=R({width:f,height:c},e,n,i,"majority"===l?.5:0);let v;const b=(t,e,n,i)=>{const l=t instanceof Float32Array||t instanceof Float64Array?0:.5;for(let s=0;s<m;s++){v=s*A;for(let o=0;o<g;o++){if(y[v]<0||w[v]<0)t[s*g+o]=0;else if(i)t[s*g+o]=e[k[v]+M[v]*f];else{const i=Math.floor(y[v]),r=Math.floor(w[v]),a=Math.ceil(y[v]),h=Math.ceil(w[v]),u=y[v]-i,c=w[v]-r;if(!n||n[i+r*f]&&n[a+r*f]&&n[i+h*f]&&n[a+h*f]){const n=(1-u)*e[i+r*f]+u*e[a+r*f],p=(1-u)*e[i+h*f]+u*e[a+h*f];t[s*g+o]=(1-c)*n+c*p+l}else t[s*g+o]=e[k[v]+M[v]*f]}v++}}},U=[];let P;const B=a?.length===d,T=[];for(let o=0;o<d;o++){if(B){const t=new Uint8Array(g*m);b(t,a[o],a[o],!0),T.push(t)}P=new p(g*m),b(P,s[o],B?a[o]:r,"nearest"===l||"majority"===l),U.push(P)}const C=new o.default({width:g,height:m,pixelType:u,pixels:U,bandMasks:B?T:void 0});if(null!=r)C.mask=new Uint8Array(g*m),b(C.mask,r,r,!0);else if(x){C.mask=new Uint8Array(g*m);for(let t=0;t<g*m;t++)C.mask[t]=y[t]<0||w[t]<0?0:1}return C.updateStatistics(),C}},61531:(t,e,n)=>{n.r(e),n.d(e,{default:()=>g});var i,l=n(93800),s=n(74719),o=n(19455),r=n(82301),a=n(50925),h=n(48602),u=n(32980),f=n(75269),c=n(64884),p=n(82518);let d=i=class extends o.A{static createEmptyBand(t,e){return new(i.getPixelArrayConstructor(t))(e)}static combineBandMasks(t){if(t.length<2)return t[0];const e=t[0].length,n=new Uint8Array(e).fill(255);for(let i=0;i<t.length;i++){const l=t[i];for(let t=0;t<e;t++)l[t]||(n[t]=0)}return n}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.premultiplyAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new s.default("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new c.z)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>function(t,e){let n=1/0,i=-1/0;const l=t.length;let s,o=0;if(null!=e)for(s=0;s<l;s++)e[s]&&(o=t[s],n=o<n?o:n,i=o>i?o:i);else for(s=0;s<l;s++)o=t[s],n=o<n?o:n,i=o>i?o:i;return new c.z(n,i)}(t,this.mask)));const t=this.mask;let e=0;if(null!=t)for(let n=0;n<t.length;n++)t[n]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;const[e,n]=(0,p.hP)(t),l=this.pixels,s=this.width*this.height,o=l.length;let r,a,h;const u=[];for(let f=0;f<o;f++){h=i.createEmptyBand(t,s),r=l[f];for(let t=0;t<s;t++)a=r[t],h[t]=a>n?n:a<e?e:a;u.push(h)}this.pixels=u,this.pixelType=t}extractBands(t){const{pixels:e,statistics:n}=this;if(null==t||0===t.length||!e||0===e.length)return this;const l=e.length,s=t.some((t=>t>=e.length)),o=l===t.length&&!t.some(((t,e)=>t!==e));if(s||o)return this;const r=this.bandMasks?.length===l?t.map((t=>this.bandMasks[t])):void 0;let{mask:a,validPixelCount:h}=this;const{width:u,height:f}=this;return r?.length&&(a=i.combineBandMasks(r),h=a.filter((t=>!!t)).length),new i({pixelType:this.pixelType,width:u,height:f,mask:a,bandMasks:r,validPixelCount:h,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>e[t])),statistics:n&&t.map((t=>n[t]))})}clone(){const t=new i({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;null!=this.mask&&(t.mask=new Uint8Array(this.mask)),this.bandMasks&&(t.bandMasks=this.bandMasks.map((t=>new Uint8Array(t))));const n=i.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=i?this.pixels[e].slice():new n(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,r.clone)(this.statistics[e]);return t.premultiplyAlpha=this.premultiplyAlpha,t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:n,premultiplyAlpha:i,pixels:l}=this;if(!t||!l?.length)return void a.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let s,o,r,h;s=o=r=l[0],l.length>=3?(o=l[1],r=l[2]):2===l.length&&(o=l[1]);const u=new Uint32Array(t),f=this.width*this.height;if(s.length===f)if(null!=e&&e.length===f)if(n)for(h=0;h<f;h++){const t=e[h];if(t){const e=t/255;u[h]=i?t<<24|r[h]*e<<16|o[h]*e<<8|s[h]*e:t<<24|r[h]<<16|o[h]<<8|s[h]}}else for(h=0;h<f;h++)e[h]&&(u[h]=255<<24|r[h]<<16|o[h]<<8|s[h]);else for(h=0;h<f;h++)u[h]=255<<24|r[h]<<16|o[h]<<8|s[h];else a.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:n,statistics:i}=this;if(!t||!e?.length)return void a.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const l=this.pixelType;let s=1,o=0,r=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(o=Math.min(o,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;r=Math.max(r,e)}s=255/r}else{let t=255;"s8"===l?(o=-128,t=127):"u16"===l?t=65535:"s16"===l?(o=-32768,t=32767):"u32"===l?t=4294967295:"s32"===l?(o=-2147483648,t=2147483647):"f32"===l?(o=-34e38,t=34e38):"f64"===l&&(o=-Number.MAX_VALUE,t=Number.MAX_VALUE),s=255/(t-o)}const h=new Uint32Array(t),u=this.width*this.height;let f,c,p,d,g;if(f=c=p=e[0],f.length!==u)return a.A.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(c=e[1],e.length>=3&&(p=e[2]),null!=n&&n.length===u)for(d=0;d<u;d++)n[d]&&(h[d]=255<<24|(p[d]-o)*s<<16|(c[d]-o)*s<<8|(f[d]-o)*s);else for(d=0;d<u;d++)h[d]=255<<24|(p[d]-o)*s<<16|(c[d]-o)*s<<8|(f[d]-o)*s;else if(null!=n&&n.length===u)for(d=0;d<u;d++)g=(f[d]-o)*s,n[d]&&(h[d]=255<<24|g<<16|g<<8|g);else for(d=0;d<u;d++)g=(f[d]-o)*s,h[d]=255<<24|g<<16|g<<8|g}_fillFrom32Bit(t){const{pixels:e,mask:n}=this;if(!t||!e?.length)return a.A.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,l,s,o;i=l=s=e[0],e.length>=3?(l=e[1],s=e[2]):2===e.length&&(l=e[1]);const r=this.width*this.height;if(i.length!==r)return a.A.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let h=0;if(null!=n&&n.length===r)for(o=0;o<r;o++)t[h++]=i[o],t[h++]=l[o],t[h++]=s[o],t[h++]=1&n[o];else for(o=0;o<r;o++)t[h++]=i[o],t[h++]=l[o],t[h++]=s[o],t[h++]=1}};(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"width",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"height",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"pixelType",void 0),(0,l._)([(0,u.w)("pixelType")],d.prototype,"castPixelType",null),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"validPixelCount",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"mask",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"maskIsAlpha",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"pixels",void 0),(0,l._)([(0,h.MZ)()],d.prototype,"premultiplyAlpha",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"statistics",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"depthCount",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"noDataValues",void 0),(0,l._)([(0,h.MZ)({json:{write:!0}})],d.prototype,"bandMasks",void 0),d=i=(0,l._)([(0,f.$)("esri.layers.support.PixelBlock")],d);const g=d},64884:(t,e,n)=>{n.d(e,{z:()=>i});class i{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.minValue=t,this.maxValue=e,this.noDataValue=n}}},82518:(t,e,n)=>{n.d(e,{$p:()=>u,Sp:()=>f,X1:()=>r,hP:()=>o,yM:()=>h,zw:()=>a});const i=9999999e31,l=2e-7,s={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34028234663852886e22,34028234663852886e22],f64:[-Number.MAX_VALUE,Number.MAX_VALUE],unknown:void 0,c64:void 0,c128:void 0};function o(t){return s[t]??[-34028234663852886e22,34028234663852886e22]}function r(t,e){return null==t||null==e?"s32":t<0?t>=-128&&e<128?"s8":t>=-32768&&e<32768?"s16":"s32":e<256?"u8":e<65536?"u16":"u32"}function a(t){return(t?.startsWith("s")||t?.startsWith("u"))??!1}function h(t,e,n,i){let[l,s]=o(n);const r=a(n);return r&&(l-=1e-5,s+=1e-5),r?n.startsWith("u")?function(t,e,n,i){const[l,s]=i;for(let o=0;o<e.length;o++)if(e[o]){const i=t[o];i<l||i>s?e[o]=0:n[o]=i+.5|0}}(t,e,i,[l,s]):function(t,e,n,i){const[l,s]=i;for(let o=0;o<e.length;o++)if(e[o]){const i=t[o];i<l||i>s?e[o]=0:n[o]=i+(i>0?.5:-.5)|0}}(t,e,i,[l,s]):function(t,e,n,i){const[l,s]=i;for(let o=0;o<e.length;o++)if(e[o]){const i=t[o];i<l||i>s?e[o]=0:n[o]=i}}(t,e,i,[l,s])}function u(t,e){for(let n=0;n<e.length;n++)e[n]&&isNaN(t[n])&&(e[n]=0,t[n]=0)}function f(t,e,n){if(t.depthCount&&t.depthCount>1)return;const{pixels:s,statistics:r,pixelType:a}=t,h=s[0].length,u=t.bandMasks??[],f=t.mask??new Uint8Array(h).fill(255),c="f32"===a||"f64"===a,p=o(a);let d=!1;for(let o=0;o<s.length;o++){const t="number"==typeof e?e:e[o];if(null==t)continue;const h=r?.[o]?.minValue??p[0],g=r?.[o]?.maxValue??p[1];if(h>t+Number.EPSILON||g<t-Number.EPSILON)continue;const m=u[o]||f.slice(),x=s[o],y=n?.customFloatTolerance;if(c&&0!==y){let e=y;e||(e=Math.abs(t)>=i?l*Math.abs(t):"f32"===a?2**-23:Number.EPSILON);for(let n=0;n<x.length;n++)m[n]&&Math.abs(x[n]-t)<e&&(x[n]=0,m[n]=0,f[n]=0,d=!0)}else for(let e=0;e<x.length;e++)m[e]&&x[e]===t&&(x[e]=0,m[e]=0,f[e]=0,d=!0);u[o]=m}if(d){const e=t.bandMasks||t.pixels.length>1?u:null;n?.matchAllNoData?t.mask=e&&e.length>1?function(t){if(t.length<2)return t[0];const e=t[0].length,n=new Uint8Array(e).fill(0);for(let i=0;i<t.length;i++){const l=t[i];for(let t=0;t<e;t++)l[t]&&(n[t]=255)}return n}(e):f:(t.bandMasks=e,t.mask=f)}d&&"updateStatistics"in t&&t.updateStatistics()}}}]);